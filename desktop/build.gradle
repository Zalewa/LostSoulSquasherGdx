apply plugin: "java"

import groovy.json.JsonSlurper

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "lostsoulsquasher.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

def copyToLib() {
    copy {
        into "$buildDir/libs"
        from distfiles()
    }
}

def packrConfigureWindows() {
    def inputFile = file("packr/config-windows.json")
    def json = new JsonSlurper().parseText(inputFile.text)
    def props = localProperties()

    json["jdk"] = props.getProperty("jdk.path")

    def builder = new groovy.json.JsonBuilder()
    builder.content = json
    json = builder.toPrettyString()

    def outputFile = file("$buildDir/libs/packr-config.json")
    outputFile.withWriter{ out ->
        out.write(json)
    }
}

def packr() {
    copy {
        into "$buildDir/libs"
        from file("packr/hard")
    }
    def props = localProperties()
    def packr = props.getProperty("packr.path")
    exec {
        executable "java"
        workingDir "$buildDir/libs"
        args "-jar", "$packr", "packr-config.json"
    }
}

task distexe() << {
    copyToLib()
    packrConfigureWindows()
    packr()
}

distexe.dependsOn dist

Properties localProperties() {
    def props = new Properties()
    file("local.properties").withInputStream {
        stream -> props.load(stream)
    }
    return props
}

FileCollection distfiles() {
    files([
        "../CREDITS.txt",
        "../LICENSE.freedoom.txt",
        "../LICENSE.lostsoul.txt",
        "../README.md"
    ])
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}